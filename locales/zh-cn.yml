---
zh-cn:
  # universal/global
  international: English
  inverse_future: 反向合约
  linear_future: 正向合约
  search: 搜索
  heading_http_request: HTTP 请求
  heading_request_parameters: 请求参数
  codequote_responseExample: 响应示例
  codequote_responseExampleFormatAll: 响应示例
  codequote_curlExample: Curl 请求示例
  codequote_subscribe: 请求订阅
  codequote_snapshot: 快照推送示例 - 链接建立成功后首次推送
  codequote_delta: 增量推送示例 - 快照数据推送后，推送的增量数据
  column_parameter: 参数
  column_required: 是否必须
  column_type: 类型
  column_comments: 说明
  row_comment_side: 方向, 有效选项:Buy, Sell (Buy Sell )
  row_comment_symbol: 合约类型
  row_comment_activeOrderType: 委托单价格类型
  row_comment_stopOrderType: 委托单价格类型
  row_comment_stopOrderStatus: 条件单状态
  row_comment_from: |
    起始ID. 默认: 返回最新数据
  row_comment_limit: 每页数量, 最大50. 默认每页20条
  row_comment_orderType: 订单类型
  row_comment_qty: 委托数量(1个委托1美元)
  row_comment_price: 委托价格. 如果是下<b>条件单</b>，该参数为<b>必填</b>. 在没有仓位时，做多的委托价格需高于市价的10%、低于1百万。如有仓位时则需优于强平价。价格增减最小单位请参考<a href="#t-market_heading-t-auth_heading_construct-t-market_heading_querysymbol">交易对接口</a>响应中的<b>price_filter</b>字段
  row_comment_basePrice: 当前市价。用于和stop_px值进行比较，确定当前条件委托是看空到<code>stop_px</code>时触发还是看多到stop_px触发。主要是用来标识当前条件单预期的方向
  row_comment_stopPx: 条件委托下单时市价
  row_comment_timeInForce: 执行策略
  row_comment_triggerBy: 触发价格类型. 默认为上一笔成交价格
  row_comment_takeProfit: 止盈价格
  row_comment_stopLoss: 止损价格
  row_comment_trailingStop: Trailing stop
  row_comment_reduceOnly: 只减仓
  row_comment_closeOnTrigger: 触发后平仓. 如果下平仓单，请设置为<code>true</code>，避免因为保证金不足而导致下单失败
  row_comment_orderLinkId: 机构自定义订单ID, 最大长度36位，且同一机构下自定义ID不可重复
  row_comment_page: 页码.默认取第一页
  row_comment_orderId: 活动订单号ID。当成功创建了活动订单后返回的唯一的订单号ID。
  row_comment_stopOrderId: 条件委托订单ID。
  row_comment_pRQty: 修改后的订单数量。如果不修改这个字段，请不要传这个参数。
  row_comment_pRPrice: 修改后的订单价格。如果不修改这个字段，请不要传这个参数。
  row_comemnt_pRTriggerPrice: 修改后的条件单的触发价格
  row_comment_leverage: 杠杆。<code>杠杆为0</code>意味着全仓模式.全场模式下修改杠杆会变成逐仓模式
  row_comment_startDate: Start point for result
  row_comment_endDate: End point for result
  row_comment_currency: Currency type
  row_comment_coin: <code>currency</code> alias
  row_comment_walletFundType: Wallet fund type
  row_comment_withdrawStatus: Withdraw status
  row_comment_startTime: Start timestamp point for result
  row_comment_riskId: Risk ID. Can be found with the <a href="#get-risk-limit">Get Risk Limit</a> endpoint
  row_comment_limit: 频率限制
  row_comment_path: 请求路径
  row_comment_consume: 消耗
  row_comment_order: 按创建时间排序
  default: 默认

  # introduction in index.html.md
  intro_heading: 介绍
  intro_para:
    <p>欢迎使用 <a href="https://www.bybit.com/">Bybit</a> APIs 和 Websocket官方文档！</p>
    <p>如果您在使用API的过程中遇到问题需要帮助，请加入我们的 <a href="https://t.me/Bybitapi">官方Telegram API讨论群</a>！</p>

  intro_heading_resources: 参考资料
  intro_para_resources:
    <ul>
      <li><a href="https://github.com/bybit-exchange/bybit-official-api-docs">bybit-official-api-docs <img src="/images/github_logo_icon.png" height="14", width="14"></a> - 在这里提bug
      <li><a href="https://github.com/bybit-exchange/api-connectors/">Bybit's api-connectors <img src="/images/github_logo_icon.png" height="14", width="14"></a> - 官方API SDK
      <li><a href="https://t.me/Bybitapi">API Discussion Group <img src="/images/telegram_logo_icon.png" height="14", width="14"></a> - API讨论群
      <li><a href="https://t.me/Bybit_API_Announcements">API Announcements Channel <img src="/images/telegram_logo_icon.png" height="14", width="14"></a> - API公告群
    </ul>


# Changelog
  # if some missing values - they already have values elsewhere
  changelog_heading: 更新日志
  changelog_new: 新增
  changelog_update: 更新
  ## 2019-12-27 20191227
  ## 2019-12-18 20191218
  ## 2019-12-13 20191213
  ## 2019-12-02 20191202
  ## 2019-11-19 20191119
  ## 2019-11-07 20191107
  my_20191107: My position
  ## 2019-11-04 20191104
  cancelOrder_20191104: Cancel order
  cancelOrder__20191104: Support cancel order by <code>order_link_id</code>
  cancelCond__20191104: Support cancel conditional order by <code>order_link_id</code>
  get__20191104: Add extra info
  get___20191104: Update <code>ips</code> field to return content
  update_20191104: Update REST API rate limit
  update__20191104: The rate limit is accurate to milliseconds
  update___20191104: Refine the rate limit of the endpoints
  update____20191104: |
    Add new response fields: <code>rate_limit_reset_ms</code>, <code>rate_limit</code>
  ## 2019-10-22 20191022
  position__20191022: Add extra info, eg. wallet_balance
  trade__20191022: Fix issue of sometimes push same trade multi times
  trade___20191022: Support pushing multi trades in single message


  # api_auth
  auth_heading: 鉴权/认证
  auth_aside_key: 请先生成<a href="https://testnet.bybit.com/app/user/api-management"><b>测试网</b></a> 或 <a href="https://www.bybit.com/app/user/api-management"<b>主网</b></a>API KEY。
  auth_para_domains: |
    Domains:
    <ul>
      <li>
        <span id=testnet><a href="https://api-testnet.bybit.com">https://api-testnet.bybit.com</a></span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#testnet"><img src="/images/copy_to_clipboard.png" height=15 width=15></a></button>
      </li>
      <li>
        <span id=mainnet><a href="https://api.bybit.com">https://api.bybit.com</a></span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet"><img src="/images/copy_to_clipboard.png" height=15 width=15></a></button>
      </li>
    </ul>
  auth_para_privatepublic:
    <p>所有<b>private</b>接口都需要认证，<b>public</b> 接口不需要认证。</p>

  auth_heading_params: 公共参数
  auth_para_params: |
    需要签名的接口必须包含以下参数:
    <ul>
      <li><b>api_key</b></li>
      <li><b>timestamp</b> - UTC<b>毫秒</b>时间戳</li>
      <li><b>sign</b> - 请求参数签名</li>
    </ul>
  auth_para_recv : |
    另外我们提供可选的<code>recv_window</code>参数（单位是毫秒，默认值为<code>5000</code>），来指定请求在多长时间内有效，同时用来防止重放攻击。
  auth_aside_timestamp: |
    注意，timestamp参数必须符合如下规则: <b>server_time - recv_window <= timestamp < server_time + 1000</b>，其中server_time是Bybit服务器时间，您可以通过<a href="#t-api_heading-t-wallet_heading_setrisk-t-api_heading_server_time">服务器时间接口</a>获取。
  auth_heading_construct: 构建请求
  auth_codequote_construct1a:
    拼接参数示例（以修改杠杆接口为例）：
  auth_codequote_construct1b:
    参数按照 <b>字母顺序</b> 排列，然后计算<code>sign</code>。
  auth_codequote_construct2: |
    <b>GET</b>请求格式（查询杠杆）:
  auth_codequote_construct3: |
    <b>POST</b>请求格式（修改杠杆）:
  auth_para_construct1:
    <p>1. 所有参数按照字母顺序排序，然后按照<a href="https://en.wikipedia.org/wiki/Query_string">query string</a>格式拼接。</p>
  auth_para_construct2:
    <p>2. 使用<code>HMAC_SHA256</code>算法对第1步中拼接的query string签名，并转换为16进制字符串，得出<code>sign</code>参数。</p>
  auth_para_construct3:
    <p>3. 将<code>sign</code>参数加到请求参数中即可；注意<code>GET</code>和<code>POST</code>请求参数格式不同，详见右边示例。</p>
  auth_aside_signature:
    <a href="https://github.com/bybit-exchange/bybit-official-api-docs/tree/master/en/example">签名计算示例</a>.

  # Market Data Endpoints
  market_heading: 行情接口
  market_para_auth: The following market data endpoints do not require authentication.
  ### server time
  api_heading_server_time: Server Time
  market_para_time: Get Bybit server time.
  ### Orderbook
  market_heading_orderbook: Orderbook
  market_para_orderbook: Get the orderbook.
  market_aside_orderbook: The response is in the snapshot format.
  ### Latest Information for Symbol
  market_heading_symbol: Latest Information for Symbol
  market_para_symbol: Get the latest information for symbol.
  ### Public Trading Records
  market_heading_records: Public Trading Records
  market_para_records: Get recent trades.
  ### Get the Last Funding Rate
  market_heading_fundingRate: Get the Last Funding Rate
  market_para_fundingRate: The funding rate is generated every 8 hours at 00:00 UTC, 08:00 UTC and 16:00 UTC. For example, if a request is sent at 12:00 UTC, the funding rate generated earlier that day at 08:00 UTC will be sent.
  ### Query Symbol
  market_heading_querySymbol: Query Symbol
  market_para_querySymbol: Get symbol info.


  # Account Data Endpoints
  account_heading: 账户/交易接口
  account_para: The following account data endpoints require authentication.
  ## Active Orders
  account_heading_active: 活动单
  ### Place Active Order V2
  account_heading_placeActive: 创建活动委托单
  account_para_placeActive: |
    <p>所有活动委托都必须填写 'side', 'symbol', 'order_type', 'qty', 'price', 'time_in_force'参数，其它参数除非有特殊说明，否则都是可选的。 市价活动委托: 一个传统的市场价格订单,会以当前的最优价格为您成交订单。当且仅当选择市价单时，<code>price</code>可为空！</p>
    <p>限价活动委托: 您可以为您的订单设置一个执行价格，当市场价格达到您的设置价格时，系统会为您成交订单。</p>
    <p>止盈止损: 您仅能在开仓时设置止盈止损条件单，一旦持有仓位后提交活动委托时关联的止盈止损则不再有效。</p>
    <p>委托数量: 表示您要购买/卖出的永续合约数，对于委托数量目前Bybit只允许提交正整数。</p>
    <p>委托价格: 表示您期望购买/卖出永续合约的价格，对于委托价格目前Bybit只允许提交以0.5为增幅的正数。</p>
    <p>自定义条件单ID: 您可以自定义活动委托订单ID，我们会为您关联到系统的订单ID，并把系统的唯一订单ID在活动委托创建成功后一并返回给您，您可以使用该订单ID去取消活动委托，同时要求您传递的自定义订单ID<code>最大长度不超过36个字段且唯一</code>。</p>
    <p>每个账户最多可同时持有500个活动订单。这是针对合约的，因此可以允许出现例如：账户同时持有300个BTCUSD的活动单、280个ETHBTC合约的活动单。</p>
  ### Get Active Order
  account_heading_getActive: 查询活动委托
  account_para_getActive: |
    <p>获取我的活动委托单列表。</p>
    <p>创建/取消订单是异步。如果要获取订单的实时信息，可以调用接口<a href="#query-active-order-real-time">实时查询活动单信息</a>.</p>
  account_row_comment_orderId: 订单ID
  account_row_comment_orderStatus: 指定订单状态查询订单列表。不传该参数则默认查询所有状态订单。该参数支持多状态查询，状态之间用英文逗号分割。状态参数：Created,New,PartiallyFilled,Filled,Cancelled,Rejected
  ### Cancel Active Order V2
  account_heading_cancelActive: 撤销活动委托单
  account_para_cancelActive: |
    <p>所有撤销活动委托都必须填写<code>order_id</code>或<code>order_link_id</code>。 <code>order_id</code> - 当您成功创建了活动委托时会为您返回36位唯一的订单ID。</p>
    <p>您可以撤销未成交、部分成交的活动委托单。但全部成交的活动委托不可取消。</p>
  ### Cancel All Active Orders
  account_heading_cancelAllActive: 撤销所有活动委托单
  account_para_cancelAllActive: |
    <p>撤销所有未成交、部分成交的活动委托单。但全部成交的活动委托不可取消。</p>
  account_aside_cancelAllActive:
    注意，此api每调用一次会导致<code>rate_limit</code>扣减10
  ### Replace Active Order
  account_heading_replaceActive: 修改活动单信息
  account_para_replaceActive: |
    <p>本接口可以修改您的活动单信息.</p>
    <p><code>order_id</code>和<code>symbol</code>是必传字段。<code>p_r_qty</code> 和 <code>p_r_price</code>分别是你想修改的订单的新的量价信息. 如果这两个字段没填，那么默认不修改。</p>
    <p>您也可以仅修改订单的数量或价格。</p>
  account_aside_replaceActive:
    请注意，只有未成交或未完全成交的订单才可以被修改。
  ### Query Active Order (real-time)
  account_heading_queryActive: 实时查询活动委托
  account_para_queryActive: 实时查询活动委托

  ## Conditional Orders
  ### Place Conditional Order
  account_heading_cond: 条件单
  account_heading_placeCond: 创建条件委托单
  account_para_placeCond: |
    <p>所有条件委托都必须填写 'side', 'symbol', 'order_type', 'qty', 'price', 'base_price', 'stop_px', 'time_in_force'参数，其它参数除非有特殊说明，否则都是可选的。</p>
    <p>市价条件委托: 一个传统的市场价格订单,会以当前的最优价格为您成交订单。当且仅当选择市价单时，'price', '可为空！</p>
    <p>限价条件委托: 您可以为您的订单设置一个执行价格，当市场价格达到您的设置价格时，系统会为您成交订单。</p>
    <p>止盈止损: 您仅能在开仓时设置止盈止损条件单，一旦持有仓位后提交活动委托时关联的止盈止损则不再有效。一旦持仓后，当创建订单后发送的止盈止损信息将不再有效。</p>
    <p>委托数量: 表示您要购买/卖出的永续合约数，对于委托数量目前Bybit只允许提交正整数。</p>
    <p>委托价格: 表示您期望购买/卖出永续合约的价格，对于委托价格目前Bybit只允许提交以0.5为增幅的正数。</p>
    <p>条件委托触发价格: 您可以为您的条件委托单设置一个触发价格，条件委托单不进入委托表（Order Book)，只有触发条件成立如市场价格到达触发价格时，条件委托单才会进入交易系统。当市场价格到达触发价格：1）您的限价条件委托单进入Order Book，等待被执行；2）您的市价条件委托单将按照市场最优价格立即被执行。</p>
    <p>自定义条件单ID: 您可以自定义活动委托订单ID，我们会为您关联到系统的订单ID，并把系统的唯一订单ID在活动委托创建成功后一并返回给您，您可以使用该订单ID去取消活动委托，同时要求您传递的自定义订单ID最大长度不超过36个字段且唯一。</p>
  account_aside_placeCond:
    请注意:只允许最多创建10个条件委托单
  ### Get Conditional Order
  account_heading_getCond: 查询条件委托
  account_para_getCond: 获取我的条件委托单列表。
  ### Cancel Conditional Order
  account_heading_cancelCond: 撤消条件委托单
  account_para_cancelCond: |
    <p>所有撤销条件委托都必须填写<code>stop_order_id</code>，在您创建条件委托成功时会为您返回36位唯一的订单ID。</p>
    <p>您可以撤销所有未被激活的条件委托。本质上所有条件委托在被激活后都是属于活动委托，所以条件委托一旦被激活，您需要通过调用取消活动委托接口来取消所有未成交、部分成交的活动委托单。同样全部成交的活动委托不可取消。</p>
  ### Cancel All Conditional Orders
  account_heading_cancelAllCond: 撤消全部条件委托单
  account_para_cancelAllCond: 撤销所有未被激活的条件委托。本质上所有条件委托在被激活后都是属于活动委托，所以条件委托一旦被激活，您需要通过调用取消活动委托接口来取消所有未成交、部分成交的活动委托单。同样全部成交的活动委托不可取消。
  account_aside_cancelAllCond:
    注意，此api每调用一次会导致rate_limit扣减10
  ### Replace Conditional Order
  account_heading_replaceCond: 修改条件委托单
  account_para_replaceCond:
    <p>修改活跃的条件单。</p>
    <p><code>order_id</code> and <code>symbol</code> are required for identifying a conditional order.</p>
    <p><code>order_id</code>和<code>symbol</code>两个字段必输。<code>p_r_qty</code>, <code>p_r_price</code>和<code>p_r_trigger_price</code>这三个字段为修改后的条件单量价信息,以及触发价格. 如果不填则默认不会修改。</p>
  account_aside_replaceCond: |
    请注意，只有未触发的条件单才能被修改。
  ### Query Conditional Order (real-time)
  account_heading_queryConditional: 实时查询活动委托
  account_para_queryConditional: 实时查询活动委托。

  ## Leverage
  account_heading_leverage: 用户杠杆
  ### User Leverage
  account_heading_userLeverage: 用户杠杆
  account_para_userLeverage: 获取用户杠杆。
  ### Change User Leverage
  account_heading_changeLeverage: 修改用户杠杆
  account_para_changeLeverage: |
    <p>改变杠杆。</p>
    <p>如果您想使用<a href="https://help.bybit.com/hc/en-us/articles/360037683633-What-is-Cross-Margin">全仓模式</a>请将<code>杠杆</code>设置为0。请注意，一旦您将杠杆由0改为其他任何值，仓位模式将自动切换到逐仓模式。</p>

  ## Position
  account_heading_position: Position
  ### My Position V2 (real-time)
  account_heading_myPosition: My Position V2 (real-time)
  account_para_myPosition: Get my position list.
  ### Change Margin
  account_heading_changeMargin: Change Margin
  account_para_changeMargin: Update margin.
  account_aside_changeMargin: You cannot change margin when your position is in Cross Margin mode. See the <a href="#change-user-leverage">Change User Leverage</a> endpoint for more.
  ### Set Trading-Stop
  account_heading_tradingStop: Set Trading-Stop
  account_para_tradingStop: Set take profit, stop loss, and trailing stop for your open position.
  account_aside_tradingStop: Passing these parameters will create conditional orders controlled by the system. The system will cancel these orders if the position is closed, and adjust the qty according to the size of the open position.
  account_row_comment_takeProfit: Cannot be less than 0, 0 means cancel TP
  account_row_comment_stopLoss: Cannot be less than 0, 0 means cancel SL
  account_row_comment_trailingStop: Cannot be less than 0, 0 means cancel TS

  ## Funding
  account_heading_funding: Funding
  ### My Last Funding Fee
  account_heading_myLastFunding: My Last Funding Fee
  account_para_myLastFunding: Funding settlement occurs every 8 hours at 00:00 UTC, 08:00 UTC and 16:00 UTC. The current interval's fund fee settlement is based on the previous interval's fund rate. For example, at 16:00, the settlement is based on the fund rate generated at 8:00. The fund rate generated at 16:00 will be used at 0:00 the next day.
  ### Predicted Funding Rate and My Funding Fee
  account_heading_predictedFunding: Predicted Funding Rate and My Funding Fee
  account_para_predictedFunding: Get predicted funding rate and my funding fee.
  ## API Key Info
  account_heading_key: API Key Info
  account_para_key: Get user's API key info.

  # Wallet Data Endpoints
  wallet_heading: 钱包接口
  wallet_para: The following wallet data endpoints require authentication.
  ### Wallet Fund Records
  wallet_heading_walletRecords: Wallet Fund Records
  wallet_para_walletRecords: Get wallet fund records.
  ### Withdraw Records
  wallet_heading_withdrawRecords: Withdraw Records
  wallet_para_withdrawRecords: Get withdrawal records.
  ### User Trade Records
  wallet_heading_tradeRecords: User Trade Records
  wallet_para_tradeRecords: Get user's trading records. The last item is the oldest.
  wallet_aside_tradeRecords: This endpoint will provide multiple trades if <code>order_id</code> is not provided.
  wallet_row_comment_orderId: OrderID. If not provided, will return user's trading records
  ## Get Risk Limit
  wallet_heading_getRisk: Get Risk Limit
  wallet_para_getRisk: Get risk limit.
  wallet_aside_getRisk: Read more about the risk limit <a href="https://help.bybit.com/hc/en-us/articles/360007107454-Risk-Limit-Overview">here</a>.
  ## Set Risk Limit
  wallet_heading_setRisk: Set Risk Limit
  wallet_para_setRisk: Set risk limit.

  # API Data Endpoints
  api_heading: 通用数据接口
  api_para: 通用数据接口不需要鉴权。
  ### Server time
  api_heading_server_time: 服务器时间
  api_para_time: 获取Bybit服务器时间
  ### Announcement
  api_heading_announcment: 公告
  api_para_announcement: 获取Bybit最近30天OpenAPI公告（时间倒叙排列）

  # API Rate Limits
  rate_heading: 频率限制
  ### IP Rate Limit
  ip_rate_heading_understandin: IP频率限制
  ip_rate_para_understanding: |
    <p> Bybit会基于请求IP做频率限制，针对不同的请求方法有以下规则：</p>
    <ul>
    <li>
      <code>GET</code>方法:
      <ul>
        <li>每秒不超过35个请求</li>
        <li>连续2分钟内每秒不超过25个请求</li>
      </ul>
    </li>
    <li>
      <code>POST</code>方法:
      <ul>
        <li>每秒不超过25个请求</li>
        <li>连续2分钟内每秒不超过10个请求</li>
      </ul>
    </li>
    </ul>
  ### Account rate limit
  rate_heading_understandin: 账户频率限制
  rate_para_understanding: |
    Bybit基于<b>每分钟</b>的滑动时间窗口来做频率限制，并且是按<b>账户</b>（uid）来做划分限制，每次请求API响应中都会包含如下字段：
  rate_text_limitStatus_understanding: 该接口当前时间窗口剩余可用请求数
  rate_text_limit_understanding: 该接口当前频率限制上限
  rate_text_limitReset: 如果您已超过该接口当前窗口频率限制，该字段表示下个可用时间窗口的时间戳（毫秒），即什么时候可以恢复访问；如果您未超过该接口当前窗口频率限制，该字段表示返回的是当前服务器时间（毫秒).
  ### Rate Limits For All Endpoints
  rate_heading_allEndpoints: 接口频率限制表
  ### Order Limits
  rate_heading_limits: 下单限制
  rate_para_limits: |
    <p>每种合约可以持有的订单数量上限：</p>
    <ul>
    <li>活动单: 500</li>
    <li>条件单: 10</li>
    </ul>
  ### How to Raise Your API Limit
  rate_heading_raise: 如何提高频率限制
  rate_para_raise: |
    <ul>
    <li>请先阅读<a href="#understanding-bybit-39-s-liquidity-system">如何满足提高频率限制条件</a></li>
    <li>请发送邮件到 <a href="mailto:api@bybit.com">api@bybit.com</a>. 我们会在 1-4 个工作日内答复.</li>
    </ul>
  ### Understanding Bybit's Liquidity System
  rate_heading_liquidity: Bybit流动性贡献系统
  rate_para_liquidity: |
    <p>Bybit 使用<code>报单成交率</code> 和 <code>流动性贡献打分</code>来评价用户对改善bybit可执行流动性作出的贡献。</p>
    <p>不同symbol的<code>贡献分</code>和<code>报单成交率</code>是独立计算的。</p>
  #### Order Fill Ratio (OFR) Threshold
  rate_heading_threshold: 报单成交率
  rate_para_threshold: |
    平台上每天提交超过<code>2000</code>个报单的账户，需要保持<code>7天</code>的报单成交率高于<code>最小报单成交率门槛值</code>，违反此规则将会被降低频率或禁用 API。
  ##### Order Fill Ratio (OFR)
  rate_heading_ratio: 报单成交率
  rate_para_ratio: |
    <ul>
    <li><code>报单成交率</code>: 定义为 一段时间段内，用户已成交报单数量占该用户已提交报单数量的比例</li>
    <li><code>已提交报单</code>: 是任何已成功发送到平台的委托</li>
    <li><code>已成交报单</code>: 是成交了任何数量的委托</li>
    <li><code>报单成交率 = ( 一段时间内用户的已成交报单数量 / 一段时间内已提交报单数量)</code></li>
    </ul>
  ##### Order Fill Ratio Example
  rate_heading_ratioExample: 报单成交率举例
  rate_para_ratioExample: |
    <p>A用户成功提交一份限价委托请求，其中包含 4 个不同价格的竞买和 2 个不同价格的竞卖，并被放入交易委托账本中。然后，该用户提交撤单请求，撤了取消了其中的2个竞买请求，并重新提交了一份竞买报单请求，其中包括两个新的竞买报单。</p>
    <p>此时，B用户提交了一份市价卖单，该指令与A用户在委托队列中的 2 个竞买发生了成交。</p>
    <p>该时间段内的报单成交率:</p>
  rate_pre_ratioExampleA: |
    A用户：
    已成交报单数量 = 2
    已提交报单数量 =8
    报单成交率 = 2 / 8 = 25％
  rate_pre_ratioExampleB: |
    B用户：
    已成交报单数量 = 1
    已提交报单数量 =1
    报单成交率 = 1 / 1 = 100％
  ##### Minimum OFR Threshold
  rate_heading_minimum: API 交易用户最小报单成交率门槛
  rate_para_minimum: <code>7</code>日内API 交易用户最小报单成交率门槛 0.1%
  #### API Request Frequency Limits
  rate_heading_frequency: API 交易用户提高频率的条件
  rate_para_frequency:
    平台会根据API用户近<code>7</code>日挂单对<code>平台流动性贡献分</code>的最低值，对满足条件的用户进行提高频率上限的奖励
  column_LCP: 流动性贡献分
  column_frequencyLimit: Order频率限制
  row_frequencyLimit_800: 800次 / 每分钟
  row_frequencyLimit_600: 600次 / 每分钟
  row_frequencyLimit_400: 400次 / 每分钟
  row_frequencyLimit_200: 200次 / 每分钟
  row_frequencyLimit_100: 100次 / 每分钟
  ##### Liquidity Contribution Points (LCP)
  rate_heading_liquidityPoints: 流动性贡献打分
  rate_para_liquidityPoints: |
    <ul>
    <li><code>流动性贡献打分 = 有效价格挂单自占比 * 有效价格挂单量平台占比 * 100</code></li>
    </ul>
  ##### Explanation
  rate_heading_explanation: 名词解释
  ###### Effective Price Range
  rate_heading_priceRange: 有效价格挂单
  rate_para_priceRange: |
    <ul>
    <li><p><code>有效价格挂单</code>: 定义为在距离盘口中间价较近的规定范围内的挂单被定义为有效价格挂单.</p>
    </li>
    <li><p><code>最佳竞价中间价</code>:  (最佳竞买价 + 最佳竞卖价) 的均值</p>
    </li>
    <li><p><code>最佳竞价中间价 = 1/2*（最佳竞买价 + 最佳竞卖价）</code></p>
    </li>
    </ul>
  ###### Effective Price Range example
  rate_heading_priceRangeExample: 有效价格范围
  rate_pre_priceRangeExample: |
    [最佳竞价中间价 - 3 * 价格最小变动单位, 最佳竞价中间价 + 3 * 价格最小变动单位]

    举例：
     BTC最佳竞买价 = 10000
     BTC最佳竞卖价 = 10001
     “有效价格”范围：
     [(10000 + 10001) / 2 - 3* 0.5, (10000 + 10001) / 2 + 3* 0.5] = [9999,10002]
  ###### POU
  rate_heading_POU: 有效价格挂单自占比
  rate_para_POU: |
    <ul>
    <li><code>有效价格挂单自占比</code>: 定义为该用户在 <code>有效价格 </code> 范围内的挂单数量占该用户在当前时间提交的挂单总数量的比例。</li>
    </ul>
    <p>每秒计算 该用户在<code>有效价格</code>范围内的报挂单数量 /该用户提交的挂单总数量，然后每日计算用户当日占比的平均值。</p>
  ###### POU example
  rate_heading_POUExample: 有效价格挂单自占比举例：
  rate_para_POUExample: 某用户在交易委托账本中共有 10000张竞价买单，其中 2000 张报价为9995，8000 张报价为9999 当时“有效价格”范围：[9999, 10002]
  rate_pre_POUExample: |
    该用户在<code>有效价格</code>范围内的挂单数量 = 8000
    该用户提交的挂单总数量 = 10000
    有效价格挂单自占比 = 8000 / 10000 = 0.8

  ###### POA
  rate_heading_POA: 有效价格挂单平台占比
  rate_para_POA: |
    <ul>
    <li><code>有效价格挂单平台占比</code>: 定义为该用户在有效价格范围内的挂单数量占平台所有用户在<code>有效价格</code>范围内的挂单总数量的比例.</li>
    </ul>
    <p>每秒计算 该用户在<code>有效价格</code>范围内的挂单数量 / 平台所有用户在<code>有效价格</code>范围内的挂单总数量，然后每日计算用户当日占比的平均值。</p>
  ###### POA example
  rate_heading_POAExample: 有效价格挂单平台占比举例：
  rate_para_POAExample: 某一秒，用户在“有效价格”范围：[9999, 10002] 内的挂单有8000张，全平台的交易委托账本在 [9999, 10002] 内的挂单总量为200000。
  rate_pre_POAExample: |
    该用户在<code>有效价格</code>范围内的挂单数量 = 8000
    平台所有用户在<code>有效价格</code>范围内的挂单总数量 = 200000
    有效价格挂单量平台占比 = 8000 / 200000 = 0.04
  rate_aside_POAExample: 如果机制有更新，我们会提前通过官网提前通知。

  # WebSocket Data
  websocket_heading: WebSocket接口
  ## Authentication
  websocket_heading_authentication: Authentication
  websocket_codequote_auth: |
    Authentication methods:
  websocket_codequote_auth1: |
    First method: Apply for authentication when establishing a connection.
  websocket_codequote_auth2: |
    Second method: Apply for authentication after establishing a connection through auth request.
  websocket_para_endpoint: |
    Base endpoints:
    <ul>
    <p>
      <li>Testnet:
        <span id="testnet_address">wss://stream-testnet.bybit.com/realtime</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#testnet_address"><img src="/images/copy_to_clipboard.png" height=15 width=15></a></button>
      </li>
    </p>
    <p>
      <li>Mainnet:
        <span id="mainnet_address">wss://stream.bybit.com/realtime</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_address"><img src="/images/copy_to_clipboard.png" height=15 width=15></a></button>
      </li>
    </p>
    </ul>
  websocket_aside_auth: <b>Public</b> topics do not require authentication. The following section applies to <b>private</b> topics only.
  websocket_para_methods: There are two methods of authentication, as shown in the code panel to the right.
  websocket_aside_signature: Example signature algorithms can be found <a href="https://github.com/bybit-exchange/bybit-official-api-docs/tree/master/en/example">here</a>.
  ## How to Send the Heartbeat Packet
  websocket_heading_hearbeat: How to Send the Heartbeat Packet
  websocket_codequote_heartbeat: How to Send
  websocket_aside_heartbeat: Due to unstable networks or program errors, we strongly advise you to send the <code>ping</code> heartbeat packet to maintain websocket connections. We recommend every 30 seconds to 1 minute.
  ## Rate Limits
  websocket_heading_limit: Rate Limits
  websocket_para_limit: One API key can establish 20 concurrent connections. Any additional connection after 20 connections will be rejected.
  ## How to Subscribe to Topics
  websocket_heading_subscribe: How to Subscribe to Topics
  ### Understanding Websocket Filters
  websocket_heading_filters: Understanding Websocket Filters
  websocket_codequote_filters1: How to subscribe with a filter
  websocket_codequote_filters2: How to subscribe with multiple filters
  websocket_codequote_filters3: How to subscribe without filters
  websocket_para_filters: |
   After establishing the connection, one can subscribe to a new topic by sending a JSON request. The specific formats are as follows:
  websocket_para_filters1: |
    <p>The <code>topic</code> indicates the data you would like to receive whilst the <code>filter</code> parses for the specific data you desire - for example, the symbol. The <code>topic</code> is mandatory but the <code>filter</code> is optional.</p>
    <p>To subscribe to more than one topic, simply list multiple topics out, like so:</p>
  websocket_para_filters2: |
    <p>It is possible to use multiple filters for the same topic by splitting them with a pipe (<code>|</code>) - of course, these filters must all be applicable to the selected <code>topic</code>.</p>
    <p>Finally, to subscribe to the topic without filters please use the <code>*</code> wildcard.</p>
  ### Intervals
  websocket_heading_intervals: Intervals
  websocket_para_intervals: Some topics are pushed at intervals. If the `args` contain a millisecond param, such as `100ms`, this topic is pushed at intervals. Otherwise, it is pushed constantly.

  ## Understanding the Subscription Response
  websocket_heading_response: Understanding the Subscription Response
  websocket_codequote_response: Subscription Response
  websocket_para_response: Every subscription will have a response.
  ## Public Topics
  websocket_heading_public: Public Topics
  ### orderBookL2_25
  websocket_heading_orderbook25: orderBookL2_25
  websocket_para_orderbook251: Fetches the orderbook with a depth of 25 orders per side.
  websocket_para_orderbook252: |
    <p>After the subscription response, the first response will be the snapshot response. This shows the entire orderbook. The data is ordered by price, starting with the lowest buys and ending with the highest sells.</p>
    <p>Following this, all responses are in the delta format, which represents updates to the orderbook relative to the last response.</p>
  ### orderBookL2_200
  websocket_heading_orderbook200: orderBookL2_200
  websocket_para_orderbook200: |
    <p>Fetches the orderbook with a depth of 200 orders per side.</p>
    <p>After the subscription response, the first response will be the snapshot response. This shows the entire orderbook. The data is ordered by price, starting with the lowest buys and ending with the highest sells.</p>
    <p>Following this, all responses are in the delta format, which represents updates to the orderbook relative to the last response.</p>
  ### trade
  websocket_heading_trade: trade
  websocket_para_trade: Get real-time trading information.
  ### insurance
  websocket_heading_insurance: insurance
  websocket_para_insurance: Get the daily insurance fund update.
  websocket_aside_insurance: The <code>wallet_balance</code> is in Satoshis, with one Satoshi being 100 millionth (<code>100000000</code>) of one Bitcoin.
  ### instrument_info
  websocket_heading_instrumentInfo: instrument_info
  websocket_para_instrumentInfo: Get latest information for symbol.
  websocket_aside_instrumentInfo1: |
    This topic only utilises the <code>update</code> field. Both the <code>delete</code> and <code>insert</code> fields are null. If a key is not found in the <code>update</code> field, its value has not changed.
  websocket_aside_instrumentInfo2: |
    Some values use scientific notation. This is indicated by that value's key, which will be appended with, for example, <code>e6</code>. If the key is <code>last_price_e4</code> and the value is <code>81585000</code>, then to find the true value we can do <code>81585000 * 10^4</code>, which equals <code>8158.5</code>.
  ### klineV2
  websocket_heading_klineV2: klineV2
  websocket_para_klineV2: |
    <p>Currently supported intervals:</p>
    <ul>
    <li>1 3 5 15 30</li>
    <li>60 120 240 360 720</li>
    <li>D</li>
    <li>W</li>
    <li>M</li>
    <li>Y</li>
    </ul>
  websocket_aside_klineV2: |
    If <code>confirm</code> is <code>True</code>, the data is the final tick for the interval. Otherwise, it is a snapshot.

  ## Private Topics
  websocket_heading_private: Private Topics
  ### position
  websocket_heading_position: position
  ### execution
  websocket_heading_execution: execution
  ### order
  websocket_heading_order: order
  ### stop_order
  websocket_heading_stopOrder: stop_order

  # Archive Data
  archive_data_heading: 归档数据
  archive_data_market: 历史行情
  archive_data_intro: 您可以在这里获取Bybit <a href="https://public.bybit.com">历史行情数据</a>。

  # Error Definitions
  Error_heading: 错误码

  # ENUMs Definitions
  ENUMs_header: 枚举定义
  ENUMs_para: This is a list of valid options (and rules) for the different parameters when sending a request to the API.
  ## Wallet fund type (`wallet_fund_type`)
  deposit:      ""
  withdraw:     ""
  realisedpnl:  ""
  commission:   ""
  refund:       ""
  prize:        ""
  exchangeOrderWithdraw: ""
  exchangeOrderDeposit:  ""
  ## Withdraw status (`status`)
  toBeConfirmed:  ""
  underReview:    ""
  pending:        "- Pending transfer"
  success:        ""
  cancelByUser:   ""
  reject:         ""
  expire:         ""
  ## Order type (`order_type`)
  limit:  ""
  market: ""
  ## Quantity (`qty`)
  quantity:
    <ul>
      <li>Maximum quantity of 1 million (<code>1000000</code>)</li>
      <li>Must be an integer - no decimals, only a whole number of USD contracts
    <ul>
      <li><code>40</code> - allowed</li>
      <li><code>30.5</code> - illegal</li>
    </ul>
    </li>
    </ul>
  ## Price (`price`)
  price:
    <ul>
    <li>Active order<ul>
    <li>Must be an increment of that market&#39;s <code>tick_size</code><ul>
    <li>Current symbol information (like tick sizes) can be found with the <a href="#">Query Symbol endpoint</a>.</li>
    <li>Use modulo (<code>%</code>) to calculate whether or not a price will be accepted, like so:<pre class="center-column">
    IF price % tick_size = 0
        // send request
    ELSE
        // do not send request as the price will not be accepted by the system
    </pre></li>
    </ul>
    </li>
    <li>Must be less than 1 million (<code>1000000</code>)</li>
    <li>If the user has no open position then the price must be greater than 10% of the market price<ul>
    <li>For example, if the current market price (last price) is <code>10314</code>, then the absolute minimum the price may be is <code>1031.5</code>. It may not be <code>1031</code> or below.</li>
    <li>In pseudocode (assuming the price is an increment of 0.5):<pre class="center-column">
    IF price > (last_price * 0.1)
        // send request
    ELSE
        // do not send request as the price will not be accepted by the system
    </pre></li>
    </ul>
    </li>
    <li>If the user holds a position, the order price must be better than the liquidation price.<ul>
    <li>For example, if the liquidation price of an open long position is <code>5176.5</code> then the price may be a minimum of <code>5177</code>. In the case of a short position the price must be less than the liquidation price.</li>
    </ul>
    </li>
    </ul>
    </li>
    <li>Conditional order<ul>
    <li>Must be equal to order greater than <code>1</code></li>
    </ul>
    </li>
    </ul>
## Time in force (`time_in_force`)
  goodTillCancel:     ""
  immediateOrCancel:  ""
  fillOrKill:         ""
  postOnly:           ""
## Trigger price type (`trigger_by`)
  lastPrice:  ""
  indexPrice: ""
  markPrice:  ""
## Order status (`order_status`) (creation)
  aside_orderStatusCreation: |
    These are the possible values for <code>order_status</code> as included in the response of an <b>Order Creation</b> request. To see the options for <code>order_status</code> in the response for a Get Active/Conditional request, see <a href="#t-enums_header-order-status-order_status-get">here</a>.
  created:          ""
  new:              ""
  partiallyFilled:  ""
  filled:           ""
  cancelled:        ""
  rejected:         "- order rejected by the system."
## Order (`order`)
  para_order: This is for sorting the orders by creation date.
  desc: "(default)"
  asc:  ""
## Order status (`order_status`) (get)
  aside_orderStatusGet: |
    These are the possible values for <code>order_status</code> as included in the response of a <b>Get Order</b> request. To see the options for <code>order_status</code> in the response for a Create Active/Conditional request, see <a href="#t-enums_header-order-status-order_status-creation">here</a>.
  para_orderStatusGet: |
    Filter fetched orders by their order statuses. To filter by multiple statuses, separate with a comma like so: <code>Filled,New</code>
  created1:         ""
  rejected1:        ""
  new1:             ""
  partiallyFilled1: ""
  filled1:          ""
  cancelled1:       ""
  pendingCancel1:   "- The matching engine has received the cancellation but there is no guarantee that it will be successful"
  deactivated1:     "- The conditional order was cancelled before triggering"
  ## Stop order status (`stop_order_status`)
  active      : "- order is triggered and placed successfully"
  untriggered : "- order waits to be triggered"
  triggered   : "- order is triggered"
  cancelled   : "- order is cancelled"
  rejected    : "- order is triggered but fail to be placed"
  ## Cancel type (`cancel_type`)
  cancelByUser:         ""
  cancelByReduceOnly:   ""
  cancelByPrepareLiq:   "- Cancelled by force liquidation"
  cancelByPrepareAdl:   "- Cancelled by ADL"
  cancelByAdmin:        ""
  cancelByTpSlTsClear:  "- This is a cancelled TP/SL/TS order"
  cancelByPzSideCh:     "- This order is cancelled after TP/SL/TS"
  ## Create type (`create_type`)
  createByUser:                 ""
  createByClosing:              ""
  createByAdminClosing:         ""
  createByStopOrder:            ""
  createByTakeProfit:           ""
  createByStopLoss:             ""
  createByTrailingStop:         ""
  createByLiq:                  "- Created by partial liquidation"
  createByAdl_PassThrough:      "- Created by ADL"
  createByTakeOver_PassThrough: "- Created by liquidation takeover"


  # Misc.
  misc_row_comment_orderLinkIdNotOrderId: 机构ID。如果未填order_id则为<b>必填</b>字段。
  misc_row_comment_orderLinkIdNotStopOrderId: 机构ID。如果未填stop_order_id则为<b>必填</b>字段。
  misc_row_comment_orderIdNotOrderLinkId: 订单ID。如果未填order_link_id则为<b>必填</b>字段。
  misc_row_comment_symbolNotOrderId: Contract type. <b>Required</b> if not passing order_id
