---
en:
  international: 简体中文
  inverse_future: Inverse Futures
  linear_future: Linear Futures
  search: Search
  introduction: Introduction
  bybit_api_resources: Bybit Api Resources
  authentication: Authentication
  param_for_auth: 鉴权公共参数
  construct_req: 创建请求
  # universal/global
  heading_http_request: HTTP Request
  heading_request_parameters: Request Parameters
  codequote_responseExample: Response Example
  codequote_responseExampleFormatAll: Response Example - format of all responses
  codequote_subscribe: How to Subscribe
  codequote_snapshot: Snapshot Response Example - format of the first response
  codequote_delta: Delta Response Example - format of the responses following the snapshot response
  column_parameter: parameter
  column_required: required
  column_type: type
  column_comments: comments
  row_comment_symbol: Contract type
  row_comment_from: |
    From ID. Default: return latest data
  row_comment_limit: Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page
  row_comment_orderType: Active order type
  row_comment_qty: Order quantity in USD
  row_comment_price: Execution price. <b>Required</b> if you make limit order. Must be an increment of 0.5
  row_comment_timeInForce: Time in force
  row_comment_takeProfit: Take profit price
  row_comment_stopLoss: Stop loss price
  row_comment_trailingStop: Trailing stop
  row_comment_reduceOnly: Reduce only
  row_comment_closeOnTrigger: Close on trigger. When creating a closing order, we highly recommend <code>close_on_trigger</code> is set as <code>True</code> to avoid failing by insufficient available margin
  row_comment_orderLinkId: Customised order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.
  row_comment_page: Page. Default getting first page data
  row_comment_order: Sort orders by creation date
  row_comment_orderId: Your active order ID. The unique order ID returned to you when the corresponding active order was created
  row_comment_stopOrderId: Your conditoinal order ID. The unique order ID returned to you when the corresponding active order was created
  row_comment_pRQty: New order quantity. Do not pass this field if you don't want modify it
  row_comment_pRPrice: New order price. Do not pass this field if you don't want modify it
  row_comemnt_pRTriggerPrice: New conditional order's trigger price, also known as stop_px
  row_comment_leverage: Leverage. <code>0</code> means Cross Margin mode - any other value means Isolated Margin mode
  row_comment_startDate: Start point for result
  row_comment_endDate: End point for result
  row_comment_currency: Currency type
  row_comment_coin: <code>currency</code> alias
  row_comment_walletFundType: Wallet fund type
  row_comment_withdrawStatus: Withdraw status
  row_comment_startTime: Start timestamp point for result
  row_comment_riskId: Risk ID. Can be found with the <a href="#get-risk-limit">Get Risk Limit</a> endpoint


  # introduction in index.html.md
  intro_heading: Introduction
  intro_para:
    <p>Welcome to the official documentation for the <a href="https://www.bybit.com/">Bybit</a> APIs and Websocket! Here you can find details on how to access all of our endpoints, their respective expected outputs, and possible errors you may encounter.</p>
    <p>If you encounter an issue you need help with, have a suggestions for us, or just want to have a chat with fellow developers then please head on over to our <a href="https://t.me/Bybitapi">API Telegram chat</a>!</p>

  intro_heading_resources: Bybit API Resources
  intro_para_resources:
    <ul>
      <li><a href="https://github.com/bybit-exchange/bybit-official-api-docs">bybit-official-api-docs <img src="/images/github_logo_icon.png" height="14", width="14"></a> - report issues here!
      <li><a href="https://github.com/bybit-exchange/api-connectors/">Bybit's api-connectors <img src="/images/github_logo_icon.png" height="14", width="14"></a> - find a repo of prebuilt libraries here!
      <li><a href="https://t.me/Bybitapi">API Discussion Group <img src="/images/telegram_logo_icon.png" height="14", width="14"></a> - get help here!
      <li><a href="https://t.me/Bybit_API_Announcements">API Announcements Channel <img src="/images/telegram_logo_icon.png" height="14", width="14"></a> - subscribe for changes to the API!
    </ul>

  # api_auth
  auth_heading: Authentication
  auth_aside_key: To generate an API key please go <a href="https://testnet.bybit.com/app/user/api-management">here for the <b>testnet</b></a> or <a href="https://www.bybit.com/app/user/api-management">here for the <b>mainnet</b></a>.
  auth_para_domains: |
    Domains:
    <ul>
      <li>
        <span id=testnet><a href="https://api-testnet.bybit.com">https://api-testnet.bybit.com</a></span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#testnet"><img src="/images/copy_to_clipboard.png" height=15 width=15></a></button>
      </li>
      <li>
        <span id=mainnet><a href="https://api.bybit.com">https://api.bybit.com</a></span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet"><img src="/images/copy_to_clipboard.png" height=15 width=15></a></button>
      </li>
    </ul>
  auth_para_privatepublic:
    <p>All requests made to <b>private</b> endpoints must be authenticated. Requests made to <b>public</b> endpoints do not require the additional parameters needed for authentication.</p>

  auth_heading_params: Parameters for Authenticated Endpoints
  auth_para_params: |
    The following parameters must be used for authentication:
    <ul>
      <li>`api_key`</li>
      <li>`timestamp` - UTC timestamp in **milliseconds**</li>
      <li>`sign` - a signature derived from the request's parameters</li>
    </ul>
  auth_aside_timestamp: |
    Make sure to conform to the timestamp rule of verification or your request will be rejected! Timestamp rule of verification: timestamp < server_time + 1000
  auth_para_recv : |
    Additionally, we offer the <code>recv_window</code>, which indicates for how long an HTTP request is valid. This should be sent in milliseconds. Default value: 5000. This is used to prevent replay attacks.
  auth_heading_construct: Constructing the Request
  auth_codequote_construct1a:
    An example for adjusting leverage
  auth_codequote_construct1b:
    Note how the parameters are ordered in <b>ascending</b> order, with api_key first followed by leverage, then symbol, then timestamp.
  auth_codequote_construct2: |
    Different requests need different message formats. Possible message formats for <b>GET</b> requests:
  auth_codequote_construct3: |
    Message format for <b>POST</b> requests:
  auth_para_construct1:
    <p>1. Concatenate all the public parameters in the <a href="https://en.wikipedia.org/wiki/Query_string">query string</a> format. The parameters must be ordered in <b>ascending</b> order. This will be used to generate the <code>sign</code>.</p>
  auth_para_construct2:
    <p>2. Sign the parameters string.</p>
  auth_para_construct3:
    <p>3. Append the signature at the end of the parameters string, and send the HTTP request. Please note that the format for messages is different depending on whether you are sending a GET or POST request.</p>
  auth_aside_signature:
    Example signature algorithms can be found <a href="https://github.com/bybit-exchange/bybit-official-api-docs/tree/master/en/example">here</a>.

  # Market Data Endpoints
  market_heading: Market Data Endpoints
  market_para_auth: The following market data endpoints do not require authentication.
  ### server time
  market_heading_time: Server Time
  market_para_time: Get Bybit server time.
  ### Orderbook
  market_heading_orderbook: Orderbook
  market_para_orderbook: Get the orderbook.
  market_aside_orderbook: The response is in the snapshot format.
  ### Latest Information for Symbol
  market_heading_symbol: Latest Information for Symbol
  market_para_symbol: Get the latest information for symbol.
  ### Public Trading Records
  market_heading_records: Public Trading Records
  market_para_records: Get recent trades.
  ### Get the Last Funding Rate
  market_heading_fundingRate: Get the Last Funding Rate
  market_para_fundingRate: The funding rate is generated every 8 hours at 00:00 UTC, 08:00 UTC and 16:00 UTC. For example, if a request is sent at 12:00 UTC, the funding rate generated earlier that day at 08:00 UTC will be sent.
  ### Query Symbol
  market_heading_querySymbol: Query Symbol
  market_para_querySymbol: Get symbol info.

  # Account Data Endpoints
  account_heading: Account Data Endpoints
  account_para: The following account data endpoints require authentication.
  ## Active Orders
  account_heading_active: Active Orders
  ### Place Active Order V2
  account_heading_placeActive: Place Active Order V2
  account_para_placeActive: |
    <p>Market price active order: A traditional market price order, will be filled at the best available price. <code>price</code> is not required for this type of order.</p>
    <p>Limit price active order: You can set an execution price for your order. Only when the last traded price reaches the order price will the system will fill your order.</p>
    <p>Take profit/Stop loss: You may only set a take-profit/stop-loss conditional order upon opening the position. Once you hold a position, any new active order requests which contain TP/SL/TS data will be accepted but TP/SL/TS data will be ignored.</p>
    <p>Custom order ID: You may customise order IDs for active orders. We will link it to the system order ID, and return the unique system order ID to you after the active order is created successfully. You may use this order ID or your custom order ID to cancel your active order. The customised order ID should be unique, with a maximum length of 36 characters.</p>
    <p>Each account can hold up to 500 active orders yet to be filled entirely simultaneously. This is per instrument, so it's possible to have, for example, 300 active orders on the BTCUSD instrument and 280 active orders on the ETHBTC instrument.</p>
  ### Get Active Order
  account_heading_getActive: Get Active Order
  account_para_getActive: |
    <p>Get my active order list.</p>
    <p>Order creation/cancellation is asynchronous. If you want real-time information about an order, you can call the <a href="#query-active-order-real-time">Query Active Order (real-time)</a>.</p>
  account_row_comment_orderId: Order ID
  account_row_comment_orderStatus: Query your orders for all statuses if 'order_status' is empty. If you want to query orders with specific statuses, you can pass the order_status split by ','.
  ### Cancel Active Order V2
  account_heading_cancelActive: Cancel Active Order V2
  account_para_cancelActive: |
    <p>Either <code>order_id</code> or <code>order_link_id</code> are required for cancelling active orders. <code>order_id</code> - this unique 36 characters order ID was returned to you when the active order was created successfully.</p>
    <p>You may cancel active orders that are unfilled or partially filled. Fully filled orders cannot be cancelled.</p>
  ### Cancel All Active Orders
  account_heading_cancelAllActive: Cancel All Active Orders
  account_para_cancelAllActive: Cancel all active orders that are unfilled or partially filled. Fully filled orders cannot be cancelled.
  ### Replace Active Order
  account_heading_replaceActive: Replace Active Order
  account_para_replaceActive: |
    <p>Replace order can modify/amend your active orders.</p>
    <p><code>order_id</code> and <code>symbol</code> are required for identifying an active order. <code>p_r_qty</code> and <code>p_r_price</code> are the modified price and quantity. If these two fields are not provided, nothing will be modified.</p>
    <p>It is possible to modify only the qty or price of an order.</p>
  account_aside_replaceActive:
    Please note that only orders that are unfilled or partially filled can be modified by the replace-order API.
  ### Query Active Order (real-time)
  account_heading_queryActive: Query Active Order (real-time)
  account_para_queryActive: Query real-time active order information.

  ## Conditional Orders
  ### Place Conditional Order
  account_heading_cond: Conditional Orders
  account_heading_placeCond: Place Conditional Order
  account_para_placeCond: |
    <p>Market price conditional order: A traditional market price order, will be filled at the best available price. <code>price</code> is not required for this type of order.</p>
    <p>Limit price conditional order: You can set an execution price for your order. Only when the last traded price reaches the order price will the system will fill your order.</p>
    <p>Custom order ID: You may customise order IDs for conditional orders. We will link it to the system order ID, and return the unique system order ID to you after the conditional order is created successfully. You may use this order ID to cancel your conditional order. The customised order ID should be unique, with a maximum length of 36 characters.</p>
    <p>Conditional order trigger price: You may set a trigger price for your conditional order. Conditional orders will not enter the orderbook until the last price hits the trigger price. When the last price hits the trigger price, your order will either: 1) your limit conditional order will enter the orderbook, and wait to be executed; 2) your market conditional order will be executed immediately at the best available market price.</p>
    <p>Note: Take profit/Stop loss is not supported when placing conditional orders. One can only use these 2 functions when placing active orders.</p>
    <p>Each account can hold up to 10 conditional orders yet to be filled entirely simultaneously.</p>
  ### Get Conditional Order
  account_heading_getCond: Get Conditional Order
  account_para_getCond: Get my conditional order list.
  ### Cancel Conditional Order
  account_heading_cancelCond: Cancel Conditional Order
  account_para_cancelCond: |
    <p><code>stop_order_id</code> is required for cancelling conditional order. The unique 36 characters order ID was returned to you when the conditional order was created successfully.</p>
    <p>You may cancel all untriggered conditional orders. Essentially, after a conditional order is triggered, it will become an active order. So, when a conditional order is triggered, cancellation has to be done through the active order endpoint for any unfilled or partially filled active order. As always, orders that have been fully filled cannot be cancelled.</p>
  ### Cancel All Conditional Orders
  account_heading_cancelAllCond: Cancel All Conditional Orders
  account_para_cancelAllCond: Cancel all untriggered conditional orders.
  ### Replace Conditional Order
  account_heading_replaceCond: Replace Conditional Order
  account_para_replaceCond:
    <p>Replace conditional order can modify/amend your conditional orders.</p>
    <p><code>order_id</code> and <code>symbol</code> are required for identifying a conditional order.</p>
    <p><code>p_r_qty</code>, <code>p_r_price</code> and <code>p_r_trigger_price</code> can be set for your conditional order. If these fields are not provided, nothing will be modified.</p>
    <p>It is possible to modify only one of these at a time.</p>
  account_aside_replaceCond: |
    Please note that you can only modify untriggered conditional orders.
  ### Query Conditional Order (real-time)
  account_heading_queryConditional: Query Conditional Order (real-time)
  account_para_queryConditional: Query real-time stop order information.


  ## Leverage
  account_heading_leverage: Leverage
  ### User Leverage
  account_heading_userLeverage: User Leverage
  account_para_userLeverage: Get user leverage.
  ### Change User Leverage
  account_heading_changeLeverage: Change User Leverage
  account_para_changeLeverage: |
    <p>Change user leverage.</p>
    <p>Set <code>leverage</code> to <code>0</code> if you want to trade in <a href="https://help.bybit.com/hc/en-us/articles/360037683633-What-is-Cross-Margin">Cross Margin mode</a>. Note that your position mode will be changed to Isolated Margin mode if you change your leverage from 0 to any other value.</p>

  ## Position
  account_heading_position: Position
  ### My Position V2 (real-time)
  account_heading_myPosition: My Position V2 (real-time)
  account_para_myPosition: Get my position list.
  ### Change Margin
  account_heading_changeMargin: Change Margin
  account_para_changeMargin: Update margin.
  account_aside_changeMargin: You cannot change margin when your position is in Cross Margin mode. See the <a href="#change-user-leverage">Change User Leverage</a> endpoint for more.
  ### Set Trading-Stop
  account_heading_tradingStop: Set Trading-Stop
  account_para_tradingStop: Set take profit, stop loss, and trailing stop for your open position.
  account_aside_tradingStop: Passing these parameters will create conditional orders controlled by the system. The system will cancel these orders if the position is closed, and adjust the qty according to the size of the open position.
  account_row_comment_takeProfit: Cannot be less than 0, 0 means cancel TP
  account_row_comment_stopLoss: Cannot be less than 0, 0 means cancel SL
  account_row_comment_trailingStop: Cannot be less than 0, 0 means cancel TS

  ## Funding
  account_heading_funding: Funding
  ### My Last Funding Fee
  account_heading_myLastFunding: My Last Funding Fee
  account_para_myLastFunding: Funding settlement occurs every 8 hours at 00:00 UTC, 08:00 UTC and 16:00 UTC. The current interval's fund fee settlement is based on the previous interval's fund rate. For example, at 16:00, the settlement is based on the fund rate generated at 8:00. The fund rate generated at 16:00 will be used at 0:00 the next day.
  ### Predicted Funding Rate and My Funding Fee
  account_heading_predictedFunding: Predicted Funding Rate and My Funding Fee
  account_para_predictedFunding: Get predicted funding rate and my funding fee.
  ## API Key Info
  account_heading_key: API Key Info
  account_para_key: Get user's API key info.

  # Wallet Data Endpoints
  wallet_heading: Wallet Data Endpoints
  wallet_para: The following wallet data endpoints require authentication.
  ### Wallet Fund Records
  wallet_heading_walletRecords: Wallet Fund Records
  wallet_para_walletRecords: Get wallet fund records.
  ### Withdraw Records
  wallet_heading_withdrawRecords: Withdraw Records
  wallet_para_withdrawRecords: Get withdrawal records.
  ### User Trade Records
  wallet_heading_tradeRecords: User Trade Records
  wallet_para_tradeRecords: Get user's trading records. The last item is the oldest.
  wallet_aside_tradeRecords: This endpoint will provide multiple trades if <code>order_id</code> is not provided.
  wallet_row_comment_orderId: OrderID. If not provided, will return user's trading records
  ## Get Risk Limit
  wallet_heading_getRisk: Get Risk Limit
  wallet_para_getRisk: Get risk limit.
  wallet_aside_getRisk: Read more about the risk limit <a href="https://help.bybit.com/hc/en-us/articles/360007107454-Risk-Limit-Overview">here</a>.
  ## Set Risk Limit
  wallet_heading_setRisk: Set Risk Limit
  wallet_para_setRisk: Set risk limit.

  # API Data Endpoints
  api_heading: API Data Endpoints
  api_para: The following API data endpoint does not require authentication.
  ### Announcement
  api_heading_announcment: Announcement
  api_para_announcement: Get Bybit OpenAPI announcements in the last 30 days.

  # API Rate Limits
  rate_heading: API Rate Limits
  ### Understanding Your Request Rate Limit
  rate_heading_understandin: Understanding Your Request Rate Limit
  rate_para_understanding: |
    Every request to the API returns the fields shown in the code panel:
  rate_text_limitStatus_understanding: your remaining requests
  rate_text_limit_understanding: your current limit
  rate_text_limitReset: the timestamp indicating when your request limit resets if you have exceeded your rate_limit. Otherwise, this is just the current timestamp.
  ### Rate Limits For All Endpoints
  rate_heading_allEndpoints: Rate Limits For All Endpoints
  ### Order Limits
  rate_heading_limits: Order Limits
  rate_para_limits: |
    <p>The number of orders per instrument that can be held entirely simultaneously:</p>
    <ul>
    <li>Active orders: 500</li>
    <li>Conditional orders: 10</li>
    </ul>
  ### How to Raise Your API Limit
  rate_heading_raise: How to Raise Your API Limit
  rate_para_raise: |
    <ul>
    <li>Please read <a href="#understanding-bybit-39-s-liquidity-system">Understanding Bybit&#39;s Liquidity System</a> to understand how our system automatically allocates rate limits for users placing over 2000 orders per day.</li>
    <li>Please send your application email to <a href="mailto:api@bybit.com">api@bybit.com</a>. We will reply in 1-4 working days.</li>
    </ul>
  ### Understanding Bybit's Liquidity System
  rate_heading_liquidity: Understanding Bybit's Liquidity System
  rate_para_liquidity: |
    <p>Bybit uses an <code>Order Fill Ratio (OFR)</code> and <code>Liquidity Contribution Points (LCP)</code> to measure customers&#39; contribution to our executable liquidity.</p>
    <p>The <code>LCP</code> and <code>OFR</code> of different symbols are calculated separately.</p>
  #### Order Fill Ratio (OFR) Threshold
  rate_heading_threshold: Order Fill Ratio (OFR) Threshold
  rate_para_threshold: |
    If you place more than <code>2000</code> orders per day on Bybit, please maintain your 7-day OFR above a <code>Minimum OFR threshold</code>, or Bybit may reduce your API request frequency limit.
  ##### Order Fill Ratio (OFR)
  rate_heading_ratio: Order Fill Ratio (OFR)
  rate_para_ratio: |
    <ul>
    <li><code>Order Fill Ratio (OFR)</code>: <code>Orders Filled</code> to <code>Orders Submitted to Bybit</code> to Bybit.</li>
    <li><code>Orders Submitted to Bybit</code>: any order sent to Bybit.</li>
    <li><code>Orders Filled</code>: any order that has been filled for any amount.</li>
    <li><code>OFR = (number of orders filled / number of orders submitted to Bybit)</code></li>
    </ul>
  ##### Order Fill Ratio Example
  rate_heading_ratioExample: Order Fill Ratio Example
  rate_para_ratioExample: |
    <p>User A submitted a limit order request which contains 4 bids and 4 asks, and these orders are placed in the orderbook at different price levels. Then, User A cancelled 2 bids and submits a new limit order request which contains 2 new bids.</p>
    <p>At this time, User B submits a market order request, and matches with 2 of A&#39;s bids.</p>
    <p>The OFR of this period is calculated as follows:</p>
  rate_pre_ratioExampleA: |
    User A:
    Orders Filled = 2
    Orders Submitted to Bybit = 8
    QFR = 2/8 = 25%
  rate_pre_ratioExampleB: |
    User B:
    Orders Filled = 1
    Orders Submitted to Bybit = 1
    QFR = 1/1 = 100%
  ##### Minimum OFR Threshold
  rate_heading_minimum: Minimum OFR Threshold
  rate_para_minimum: 7-day OFR must be kept above 0.1%.
  #### API Request Frequency Limits
  rate_heading_frequency: API Request Frequency Limits
  rate_para_frequency:
    Your API request frequency limit is based on your min <code>Liquidity Contribution Points (LCP)</code> of <code>7</code> days.
  column_LCP: LCP
  column_frequencyLimit: Frequency Limit
  row_frequencyLimit_800: 800 times per minute
  row_frequencyLimit_600: 600 times per minute
  row_frequencyLimit_400: 400 times per minute
  row_frequencyLimit_200: 200 times per minute
  row_frequencyLimit_100: 100 times per minute
  ##### Liquidity Contribution Points (LCP)
  rate_heading_liquidityPoints: Liquidity Contribution Points (LCP)
  rate_para_liquidityPoints: |
    <ul>
    <li><code>Liquidity Contribution Points (LCP) = POU * POA * 100</code></li>
    </ul>
  ##### Explanation
  rate_heading_explanation: Explanation
  ###### Effective Price Range
  rate_heading_priceRange: Effective Price Range
  rate_para_priceRange: |
    <ul>
    <li><p><code>effective price range</code>: 6 tick sizes range around middle of best bid price and best ask price.</p>
    </li>
    <li><p>Min <code>effective price</code>:  (best bid price + best ask price) / 2 - (3 * tick_size)</p>
    </li>
    <li><p>Max <code>effective price</code>:  (best bid price + best ask price) / 2 + (3 * tick_size)</p>
    </li>
    </ul>
  ###### Effective Price Range example
  rate_heading_priceRangeExample: Effective Price Range Example
  rate_pre_priceRangeExample: |
    BTC best bid = 10000
    BTC best ask = 10001
    Effective Price Range: [(10000 + 10001) / 2 - 3* 0.5, (10000 + 10001) / 2 + 3* 0.5] = [9999,10002]
  ###### POU
  rate_heading_POUExample: POU
  rate_para_POUExample: |
    <ul>
    <li><code>POA</code>: the proportion of your orders within <code>effective price range</code> to all orders within <code>effective price range</code> in orderbook.</li>
    </ul>
    <p>Bybit calculates your amount of orders within <code>effective price range</code> / amount of all orders within <code>effective price range</code> in orderbook, and then performs a 1-Day Time-Weighted-Average over the series of seconds rates.</p>
  ###### POU example
  rate_heading_POUExample: POU Example
  rate_para_POUExample: User C bids 2000 contracts for $9995 and bids 8000 contracts for $9999, while effective price range is [9999,10002]
  rate_pre_POUExample: |
    amount of User C's orders within effective price range = 8000
    amount of all User C's orders = 2000 + 8000 = 10000
    POU = 8000 / 10000 = 0.8

  ###### POA
  rate_heading_POA: POA
  rate_para_POA: |
    <ul>
    <li><code>POA</code>: the proportion of your orders within <code>effective price range</code> to all orders within <code>effective price range</code> in orderbook.</li>
    </ul>
    <p>Bybit calculates your amount of orders within <code>effective price range</code> / amount of all orders within <code>effective price range</code> in orderbook, and then performs a 1-Day Time-Weighted-Average over the series of seconds rates.</p>
  ###### POA example
  rate_heading_POAExample: POA example
  rate_para_POAExample: User C only has 8000 contracts within effective price range, while Bybit have 200000 contracts within effective price range in orderbook.
  rate_pre_POAExample: |
    amount of User C's orders within effective price range = 8000
    amount of all orders within effective price range = 200000
    POA = 8000 / 200000 = 0.04
  rate_aside_POAExample: Prior notice will be given via the website if we update this mechanism.

  # WebSocket Data
  websocket_heading: WebSocket Data
  ## Authentication
  websocket_heading_authentication: Authentication
  websocket_codequote_auth: |
    Authentication methods:
  websocket_codequote_auth1: |
    First method: Apply for authentication when establishing a connection.
  websocket_codequote_auth2: |
    Second method: Apply for authentication after establishing a connection through auth request.
  websocket_para_endpoint: |
    Base endpoints:
    <ul>
    <p>
      <li>Testnet:
        <span id="testnet_address">wss://stream-testnet.bybit.com/realtime</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#testnet_address"><img src="/images/copy_to_clipboard.png" height=15 width=15></a></button>
      </li>
    </p>
    <p>
      <li>Mainnet:
        <span id="mainnet_address">wss://stream.bybit.com/realtime</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_address"><img src="/images/copy_to_clipboard.png" height=15 width=15></a></button>
      </li>
    </p>
    </ul>
  websocket_aside_auth: <b>Public</b> topics do not require authentication. The following section applies to <b>private</b> topics only.
  websocket_para_methods: There are two methods of authentication, as shown in the code panel to the right.
  websocket_aside_signature: Example signature algorithms can be found <a href="https://github.com/bybit-exchange/bybit-official-api-docs/tree/master/en/example">here</a>.
  ## How to Send the Heartbeat Packet
  websocket_heading_hearbeat: How to Send the Heartbeat Packet
  websocket_codequote_heartbeat: How to Send
  websocket_aside_heartbeat: Due to unstable networks or program errors, we strongly advise you to send the <code>ping</code> heartbeat packet to maintain websocket connections. We recommend every 30 seconds to 1 minute.
  ## Rate Limits
  websocket_heading_limit: Rate Limits
  websocket_para_limit: One API key can establish 20 concurrent connections. Any additional connection after 20 connections will be rejected.
  ## How to Subscribe to Topics
  websocket_heading_subscribe: How to Subscribe to Topics
  ### Understanding Websocket Filters
  websocket_heading_filters: Understanding Websocket Filters
  websocket_codequote_filters1: How to subscribe with a filter
  websocket_codequote_filters2: How to subscribe with multiple filters
  websocket_codequote_filters3: How to subscribe without filters
  websocket_para_filters: |
   After establishing the connection, one can subscribe to a new topic by sending a JSON request. The specific formats are as follows:
  websocket_para_filters1: |
    <p>The <code>topic</code> indicates the data you would like to receive whilst the <code>filter</code> parses for the specific data you desire - for example, the symbol. The <code>topic</code> is mandatory but the <code>filter</code> is optional.</p>
    <p>To subscribe to more than one topic, simply list multiple topics out, like so:</p>
  websocket_para_filters2: |
    <p>It is possible to use multiple filters for the same topic by splitting them with a pipe (<code>|</code>) - of course, these filters must all be applicable to the selected <code>topic</code>.</p>
    <p>Finally, to subscribe to the topic without filters please use the <code>*</code> wildcard.</p>
  ### Intervals
  websocket_heading_intervals: Intervals
  websocket_para_intervals: Some topics are pushed at intervals. If the `args` contain a millisecond param, such as `100ms`, this topic is pushed at intervals. Otherwise, it is pushed constantly.

  ## Understanding the Subscription Response
  websocket_heading_response: Understanding the Subscription Response
  websocket_codequote_response: Subscription Response
  websocket_para_response: Every subscription will have a response.
  ## Public Topics
  websocket_heading_public: Public Topics
  ### orderBookL2_25
  websocket_heading_orderbook25: orderBookL2_25
  websocket_para_orderbook251: Fetches the orderbook with a depth of 25 orders per side.
  websocket_para_orderbook252: |
    <p>After the subscription response, the first response will be the snapshot response. This shows the entire orderbook. The data is ordered by price, starting with the lowest buys and ending with the highest sells.</p>
    <p>Following this, all responses are in the delta format, which represents updates to the orderbook relative to the last response.</p>
  ### orderBookL2_200
  websocket_heading_orderbook200: orderBookL2_200
  websocket_para_orderbook200: |
    <p>Fetches the orderbook with a depth of 200 orders per side.</p>
    <p>After the subscription response, the first response will be the snapshot response. This shows the entire orderbook. The data is ordered by price, starting with the lowest buys and ending with the highest sells.</p>
    <p>Following this, all responses are in the delta format, which represents updates to the orderbook relative to the last response.</p>
  ### trade
  websocket_heading_trade: trade
  websocket_para_trade: Get real-time trading information.
  ### insurance
  websocket_heading_insurance: insurance
  websocket_para_insurance: Get the daily insurance fund update.
  websocket_aside_insurance: The <code>wallet_balance</code> is in Satoshis, with one Satoshi being 100 millionth (<code>100000000</code>) of one Bitcoin.
  ### instrument_info
  websocket_heading_instrumentInfo: instrument_info
  websocket_para_instrumentInfo: Get latest information for symbol.
  websocket_aside_instrumentInfo1: |
    This topic only utilises the <code>update</code> field. Both the <code>delete</code> and <code>insert</code> fields are null. If a key is not found in the <code>update</code> field, its value has not changed.
  websocket_aside_instrumentInfo2: |
    Some values use scientific notation. This is indicated by that value's key, which will be appended with, for example, <code>e6</code>. If the key is <code>last_price_e4</code> and the value is <code>81585000</code>, then to find the true value we can do <code>81585000 * 10^4</code>, which equals <code>8158.5</code>.
  ### klineV2
  websocket_heading_klineV2: klineV2
  websocket_para_klineV2: |
    <p>Currently supported intervals:</p>
    <ul>
    <li>1 3 5 15 30</li>
    <li>60 120 240 360 720</li>
    <li>D</li>
    <li>W</li>
    <li>M</li>
    <li>Y</li>
    </ul>
  websocket_aside_klineV2: |
    If <code>confirm</code> is <code>True</code>, the data is the final tick for the interval. Otherwise, it is a snapshot.

  ## Private Topics
  websocket_heading_private: Private Topics
  ### position
  websocket_heading_position: position
  ### execution
  websocket_heading_execution: execution
  ### order
  websocket_heading_order: order
  ### stop_order
  websocket_heading_stopOrder: stop_order

  # Error Definitions
  Error_heading: Errors

  # ENUMs Definitions
  ENUMs_header: ENUMs Definitions
  ENUMs_para: This is a list of valid options (and rules) for the different parameters when sending a request to the API.
  ## Wallet fund type (`wallet_fund_type`)
  deposit:      ""
  withdraw:     ""
  realisedpnl:  ""
  commission:   ""
  refund:       ""
  prize:        ""
  exchangeOrderWithdraw: ""
  exchangeOrderDeposit:  ""
  ## Withdraw status (`status`)
  toBeConfirmed:  ""
  underReview:    ""
  pending:        "- Pending transfer"
  success:        ""
  cancelByUser:   ""
  reject:         ""
  expire:         ""
  ## Order type (`order_type`)
  limit:  ""
  market: ""
  ## Quantity (`qty`)
  quantity:
    <ul>
      <li>Maximum quantity of 1 million (<code>1000000</code>)</li>
      <li>Must be an integer - no decimals, only a whole number of USD contracts
    <ul>
      <li><code>40</code> - allowed</li>
      <li><code>30.5</code> - illegal</li>
    </ul>
    </li>
    </ul>
  ## Price (`price`)
  price:
    <ul>
    <li>Active order<ul>
    <li>Must be an increment of that market&#39;s <code>tick_size</code><ul>
    <li>Current symbol information (like tick sizes) can be found with the <a href="#">Query Symbol endpoint</a>.</li>
    <li>Use modulo (<code>%</code>) to calculate whether or not a price will be accepted, like so:<pre class="center-column">
    IF price % tick_size = 0
        // send request
    ELSE
        // do not send request as the price will not be accepted by the system
    </pre></li>
    </ul>
    </li>
    <li>Must be less than 1 million (<code>1000000</code>)</li>
    <li>If the user has no open position then the price must be greater than 10% of the market price<ul>
    <li>For example, if the current market price (last price) is <code>10314</code>, then the absolute minimum the price may be is <code>1031.5</code>. It may not be <code>1031</code> or below.</li>
    <li>In pseudocode (assuming the price is an increment of 0.5):<pre class="center-column">
    IF price > (last_price * 0.1)
        // send request
    ELSE
        // do not send request as the price will not be accepted by the system
    </pre></li>
    </ul>
    </li>
    <li>If the user holds a position, the order price must be better than the liquidation price.<ul>
    <li>For example, if the liquidation price of an open long position is <code>5176.5</code> then the price may be a minimum of <code>5177</code>. In the case of a short position the price must be less than the liquidation price.</li>
    </ul>
    </li>
    </ul>
    </li>
    <li>Conditional order<ul>
    <li>Must be equal to order greater than <code>1</code></li>
    </ul>
    </li>
    </ul>
## Time in force (`time_in_force`)
  goodTillCancel:     ""
  immediateOrCancel:  ""
  fillOrKill:         ""
  postOnly:           ""
## Trigger price type (`trigger_by`)
  lastPrice:  ""
  indexPrice: ""
  markPrice:  ""
## Order status (`order_status`) (creation)
  aside_orderStatusCreation: |
    These are the possible values for <code>order_status</code> as included in the response of an <b>Order Creation</b> request. To see the options for <code>order_status</code> in the response for a Get Active/Conditional request, see <a href="#enums-definitions-order-status-order_status-get">here</a>.
  created:          ""
  new:              ""
  partiallyFilled:  ""
  filled:           ""
  cancelled:        ""
  rejected:         "- order rejected by the system."
## Order (`order`)
  para_order: This is for sorting the orders by creation date.
  desc: "(default)"
  asc:  ""
## Order status (`order_status`) (get)
  aside_orderStatusGet: |
    These are the possible values for <code>order_status</code> as included in the response of a <b>Get Order</b> request. To see the options for <code>order_status</code> in the response for a Create Active/Conditional request, see <a href="#enums-definitions-order-status-order_status-creation">here</a>.
  para_orderStatusGet: |
    Filter fetched orders by their order statuses. To filter by multiple statuses, separate with a comma like so: <code>Filled,New</code>
  created1:         ""
  rejected1:        ""
  new1:             ""
  partiallyFilled1: ""
  filled1:          ""
  cancelled1:       ""
  pendingCancel1:   "- The matching engine has received the cancellation but there is no guarantee that it will be successful"
  deactivated1:     "- The conditional order was cancelled before triggering"
  ## Stop order status (`stop_order_status`)
  active      : "- order is triggered and placed successfully"
  untriggered : "- order waits to be triggered"
  triggered   : "- order is triggered"
  cancelled   : "- order is cancelled"
  rejected    : "- order is triggered but fail to be placed"
  ## Cancel type (`cancel_type`)
  cancelByUser:         ""
  cancelByReduceOnly:   ""
  cancelByPrepareLiq:   "- Cancelled by force liquidation"
  cancelByPrepareAdl:   "- Cancelled by ADL"
  cancelByAdmin:        ""
  cancelByTpSlTsClear:  "- This is a cancelled TP/SL/TS order"
  cancelByPzSideCh:     "- This order is cancelled after TP/SL/TS"
  ## Create type (`create_type`)
  createByUser:                 ""
  createByClosing:              ""
  createByAdminClosing:         ""
  createByStopOrder:            ""
  createByTakeProfit:           ""
  createByStopLoss:             ""
  createByTrailingStop:         ""
  createByLiq:                  "- Created by partial liquidation"
  createByAdl_PassThrough:      "- Created by ADL"
  createByTakeOver_PassThrough: "- Created by liquidation takeover"


  # Misc.
  misc_row_comment_orderLinkIdNotOrderId: Order link ID. <b>Required</b> if not passing order_id
  misc_row_comment_orderIdNotOrderLinkId: Order ID. <b>Required</b> if not passing order_link_id
  misc_row_comment_symbolNotOrderId: Contract type. <b>Required</b> if not passing order_id
